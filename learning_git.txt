You can read the notes at https://docs.chaicode.com/git-and-github/

// TERMINOLOGY:

`git --version` is used to check the current version of Git installed on your PC.

// REPOSITORY:

A repository is a collection of files and directories that are stored together. It is a way to store and manage your code. A repository is like a folder on your computer, but it is more than just a folder. It can contain other files, folders, and even other repositories. You can think of a repository as a container that holds all your code.

`git status` -> to track the repository status

// `pwd` -> to check the current location
// `git config --global user.email "shatrughanshukla00@gmail.com"`
// `git config --global user.name "shatrughanshukla"`

The `git status` command is used to display the state of the working directory and the staging area. It shows which changes have been staged, which haven't, and which files aren't being tracked by Git. This command is very useful for understanding what is going on in your repository at any given time.

Here is a breakdown of what `git status` provides:

- Untracked files: Files in your working directory that are not being tracked by Git.
- Changes not staged for commit: Files that have been modified but not yet added to the staging area.
- Changes to be committed: Files that have been added to the staging area and will be included in the next commit.

It is recommended to run `git status` before creating a commit to ensure that you understand the current state of your working directory. This helps you to:

- Verify that there are no uncommitted changes that you might want to include in the commit.
- Ensure that you are in the correct directory and not accidentally creating a repository in the wrong location.
- Identify any untracked files that you might want to add to the repository.

// `git init`

The `git init` command is used to create a new Git repository. It can be used to convert an existing project into a Git repository or initialize a new, empty repository. When you run `git init`, it creates a new `.git` subdirectory in your project directory, which contains all the necessary metadata for the repository.

Here is how you can use `git init`:

1. Navigate to your project directory:
    ```
    cd /path/to/your/project
    ```

2. Initialize a new Git repository:
    ```
    git init
    ```

After running `git init`, your project directory will be set up as a Git repository, and you can start tracking changes, creating commits, and using other Git commands.

There are hidden files under the repository, and to access them, we run `ls -la`, which shows all the files under the repository, hidden and unhidden. Then simply write `cd filename` to enter into it, like we did here with `.git`, and then we can see all the directories and files under this by running `ls -la`.

// `ls -la`

The `ls -la` command is used to list all files and directories in the current directory, including hidden files. The `-l` option provides a detailed list with file permissions, number of links, owner, group, size, and timestamp. The `-a` option includes hidden files (those starting with a dot).

Here is how you can use `ls -la`:

1. Navigate to your desired directory:
    ```
    cd /path/to/your/directory
    ```

2. List all files and directories, including hidden ones:
    ```
    ls -la
    ```

This command is useful for inspecting the contents of a directory, especially when you need to see hidden files like `.git` in a Git repository.


// // git add <file> <file2> to add files to staging area.
// // git add . it will stage all files present in the repository.

// // git rm --cached <filename> this will unstage the file.

// // git reset <file> Removes changes from the staging area without deleting them from the working directory.

// // Use git diff --staged to see the changes staged for commit.

// // git commit -m "Commit Message" Here we are committing the changes to the repository. We can see that the changes are now committed to the repository. The -m flag is used to add a message to the commit. This message is a short description of the changes that were made. You can use this message to remember what the changes were. Missing the -m flag will result in an action that opens your default settings editor, which is usually VIM. But we've changed it to vscode.

// // git log This command will show you the history of your repository. It will show you all the commits that were made to the repository. 
// // git log --one line  We can use the --oneline flag to show only the commit message. This will make the output more compact and easier to read.

// Atomic commits are a way to make sure that each commit is a self-contained unit of work. This means that if one commit fails, you can always go back to a previous commit and fix the issue.
This is important for maintaining a clean and organized history in your repository.
When you're working in the working diresctory then it is a good practice to commit the task atomically means when 1 feature or task is competed commit it, it helps us to make clean commit history so we can easily track back our work.


// // git config --global core.editor "code --wait" we already have changed our default code editor.

// //.gitignore - it is a file in which when we write a file name then git will ignore that file and will not ask to commit or add it.
It is used when we don't want to commit or add sensitive files to staging area or repository, e.g. .env file .


// A .env file is commonly used in software development to store environment variables.
These variables are key-value pairs that configure application settings without hardcoding them into the source code.
The .env file is a simple and effective way to manage application configurations and sensitive data securely.
By using it appropriately, developers can ensure better scalability, maintainability, and security for their applications. // 

// .gitkeep is used when you want to add empty folder in the staging area or repository, by default git don't ask empty folder to add into repositories or staging area and if we want to store it then we have to use .git keep like we did here with image folder.
we can see git is asking image folder to add and commit but not to log. //